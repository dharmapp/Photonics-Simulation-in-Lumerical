clear;
selectall;
delete;
cleardcard;
switchtolayout;

### Simulation to Calculate Nonlinear Coefficient and Conversion Efficiency  ###
### For single or Double Stripe Waveguides based Ring Resonator 
### by Dharma P. Permana
### for questions email me at: dhp.permana@gmail.com 
### References:
### [1] Absil et al. 2000. Optics Letters vol.25, 8
### [2] Afshar and Monro. 2009. Optics Express vol.17, 4
### [3] L. Zhang et al. 2014. Nanophotonics vol.3, 4-5


#Input geometrical parameters for the system
gap=[100]*1e-9; #top and bottom stripe gap in nano meter
h_top=[170]*1e-9; #top stripe waveguide thickness in nanometer
h_bottom=[170]*1e-9; #bottom stripe waveguie thickness in nanometer
etch_angle=[90]*pi/180; #etching angle in raidan, for rectangular cross section waveguide set the number in the bracket to 90 degree
Ring_width =[1.2]*1e-6; #waveguide width in micrometer 
h_down=8e-6; #thickness of bottom cladding SiO2 in micrometer 
h_up=8e-6; #thickness of upper cladding SiO2 in micrometer 
h_substrate=4e-6; #Substrate thickness 
R=[200]*1e-6; #bend radius in micrometer (for bended waveguide or ring resonator)
L=2*pi*R; #Ring Circumference 

#source parameter, nonlinear and loss parameter
Lambda_pump = [1550]*1e-9; #pump wavelength in nanometer
freq_p = c/Lambda_pump; #Frequency pump
power_loss = 10; #in dB/m
n2_core = 5.5e-18; #Kerr coefficient for waveguide core (in this case I used Si core)
n2_clad = 2.79e-20; #Kerr coefficient for cladding (in this case I used SiO2 for cladding) 
alfa_square =10^(-power_loss*L/10); #Ring loss coefficient 
kappa_square = 1 - alfa_square; #Ring coupling constant
kappa = sqrt(kappa_square); #power transfer coefficient 
tau=sqrt(alfa_square);
sigma=kappa; 
alfa_absil=power_loss*log(10)/10;

#margin dimension 
x_margin = 8e-6;
y_margin = 8e-6;

#dimensi sistem
x_span =24e-6; 
y_span = 24e-6; 
z_span=0.6e-6;

#simulation region dimension 
x_span_sim=Ring_width+2*x_margin;
y_span_sim=840e-9+2*y_margin;

#mesh dimension
x_span_mesh=3.2e-6;
y_span_mesh=2e-6;
z_span_mesh=z_span;
dm = [0.035]*1e-6; #Smallest Mesh Size (in micron) of All Simulation Region 
dn = [0.020]*1e-6; #Smallest Mesh Size (in micron) of Localized Mesh Region  

##System Coordinate
#coordinate of ring center
Ring_x = 0;
Ring_y = 0; #center waveguide   
Ring_z = 0; 

##Setting Material
#material name and refractive index
material_clad="SiO2 (Glass) - Palik"; #Material for cladding 
material_ring="Si (Silicon) - Palik"; #Material for core
n_clad = getindex(material_clad,freq_p); #refractive index of cladding
n_ring=getindex(material_ring,freq_p); #refractive index of core 


##Creating Structure Group for Ring##
addstructuregroup;
set("name","Ring");
set("x",Ring_x);
set("y",Ring_y);
set("z",Ring_z);
adduserprop("etch_angle",0,etch_angle); #0 = number, etching angle 
adduserprop("material",1,material_ring); #1=string
adduserprop("width",2,Ring_width); #2 length = waveguide width 
adduserprop("gap",2,gap); #2 length = gap of top and bottom stripe 
adduserprop("top_thickness",2,h_top);
adduserprop("bottom_thickness",2,h_bottom);
adduserprop("z_span",2,z_span);
set("construction group",1);

###Creating Top and Bottom Stripe for Ring###
set("script",'
###Top Stripe###
lx_up_top=width; #width of top waveguide upperside
lx_base_top=width+2*top_thickness/tan(etch_angle); #width of top waveguide bottomside
V_top=matrix(4,2); #matrix for vertices of top stripe waveguide 
#Koordinat [x,y]
V_top(1,1:2)=[-lx_base_top/2,gap/2]; #bottom left
V_top(2,1:2)=[-lx_up_top/2,gap/2+top_thickness]; #top left
V_top(3,1:2)=[lx_up_top/2,gap/2+top_thickness]; #top right
V_top(4,1:2)=[lx_base_top/2,gap/2]; #bottom right 
addpoly;
set("name","top_stripe");
set("z span",z_span);
set("material",material);
set("vertices",V_top);

##Bottom Stripe###
lx_up_bottom=width+2*(gap+top_thickness)/tan(etch_angle); #lebar bagian atas bottom stripe bus 
lx_base_bottom=width+2*(gap+top_thickness+bottom_thickness)/tan(etch_angle); #lebar bagian bawah bottom stripe bus
V_bottom=matrix(4,2); #matrix untuk vertice bottom stripe bus 
#Koordinat [x,y]
V_bottom(1,1:2)=[-lx_base_bottom/2,-(gap/2+bottom_thickness)]; #kiri bawah 
V_bottom(2,1:2)=[-lx_up_bottom/2,-gap/2]; #kiri atas
V_bottom(3,1:2)=[lx_up_bottom/2,-gap/2]; #kanan atas
V_bottom(4,1:2)=[lx_base_bottom/2,-(gap/2 + bottom_thickness)]; #kiri bawah 
addpoly;
set("name","bottom_stripe");
set("z span",z_span);
set("material",material);
set("vertices",V_bottom);
');




###Simulation FDE Region###
# add simulation region
addfde;
set("background material",material_clad);
set("solver type","2D Z normal"); #setting geometry of mesh
set("x",0);
set("x span", x_span_sim);
set("y",0);
set("y span", y_span_sim);
set("z",0); 
set("define x mesh by","maximum mesh step");
set("define y mesh by","maximum mesh step");
set("dx",dm); 
set("dy",dm);
set("x min bc","PML"); #setting boundary condition of mesh 
set("x max bc","PML");
set("y min bc","Metal");
set("y max bc","Metal");
set("fit materials with multi-coefficient model",0);


#adding mesh 
addmesh;
set('enabled',1); #0=disable mesh ; 1=enable mesh 
set("x min",-x_span_mesh/2);
set("x max",x_span_mesh/2); 
set("y min",-y_span_mesh/2);
set("y max", y_span_mesh/2);
set("z min", -z_span_mesh/2);
set("z max", z_span_mesh/2);
set("dx", dn);
set("dy", dn);
set("dz", dn);


#seting Eigen mode solver
setanalysis("wavelength",Lambda_pump);
setanalysis("use max index",true);
setanalysis("bent waveguide",1); #0=no bending ; 1=bending on 
setanalysis("bend radius",R);
setanalysis("number of trial modes",1);
setanalysis("bend orientation",180);
setanalysis("bend location","simulation center");


#####Finding index background/cladding
select("Ring");
set("enabled",0);
findmodes;
	idx_Bg_x=pinch(getdata("FDE::data::material","index_x")); #Pinch to erase singleton dimension  
	idx_Bg_y=pinch(getdata("FDE::data::material","index_y")); #Pinch to erase singleton dimension  
switchtolayout;


#####Finding Ring Index 
select("Ring");
set("enabled",1);
findmodes;
	#index bias seluruh sistem (ring dan clad)
	idx_All_x=pinch(getdata("FDE::data::material","index_x")); #Pinch untuk menghilangkan dimensi singleton 
	idx_All_y=pinch(getdata("FDE::data::material","index_y")); #Pinch untuk menghilangkan dimensi singleton 
switchtolayout;

	#index ring
	idx_Ring_x=idx_All_x - idx_Bg_x;
	idx_Ring_y=idx_All_y - idx_Bg_y; 
	


####Creating Matrix for Identification Integral Regions
ring_region=finite(idx_Ring_x/idx_Ring_x); #The element values equal to 1 for core areas and 0 anywhere else

####Matrix for Final Refractive Index of Each Region###
idx_Core_x=idx_All_x*ring_region; #Refractive Index X for Core only
idx_Core_y=idx_All_y*ring_region; #Refractive Index Y for Core only

idx_Hole_x=idx_All_x-idx_Core_x; #Refractive Index X for hollowed clad (without core)
idx_Hole_y=idx_All_y-idx_Core_y; #Refractive Index Y for hollowed clad (without core)


findmodes;
#Take data for the first mode only (Possibly this is TE00)
ii=1; #Mode no-1 ring (with bending)
	getdata("FDE::data::mode"+num2str(ii),"TE polarization fraction"); #taking data for j-th mode 
	dname="FDE::data::mode"+num2str(ii); #input deck card data mode-j
	copydcard(dname,"Pump"); #changing name data of mode-j into data of Ring mode-j		
		
		###Extracting Datas
		neff_Pump=getdata("Pump","neff"); #Effective Index
		ng_Pump=getdata("Pump","ng"); #Group Index
		Aeff_Pump=getdata("Pump","mode effective area"); #Effective Mode Areas
		
		
			#Electric Fields Component of mode ke-j
			Ex=pinch(getdata("Pump","Ex")); 
			Ey=pinch(getdata("Pump","Ey"));
			Ez=pinch(getdata("Pump","Ez")); 
	
			#Magnetic Fields Component of mode ke-i
			Hx=pinch(getdata("Pump","Hx")); 
			Hy=pinch(getdata("Pump","Hy"));
			Hz=pinch(getdata("Pump","Hz"));
	
			#Coordinate data of mode ke-j
			x_Ring=getdata("Pump","x");
			y_Ring=getdata("Pump","y");

#FSR and Propagation Constant untuk Pump 
kp =2*pi*neff_Pump/Lambda_pump; #Propagation constant for pump 
FSR_Pump=Lambda_pump^2 /(ng_Pump*L); #FSR in wavelength

#Calculating Nonlinear Coefficient from [2]
	numerator_gamma_1=2*integrate((n2_core*idx_Core_y^2)*(Ex*conj(Ex)+Ey*conj(Ey)+Ez*conj(Ez))^2,1:2,x_Ring,y_Ring); #linear numerator term of gamma for core
	numerator_gamma_2=integrate((n2_core*idx_Core_y^2)*abs(Ex^2+Ey^2+Ez^2)^2,1:2,x_Ring,y_Ring); #nonlinear numerator term of gamma for core
	numerator_gamma_3=2*integrate((n2_clad*idx_Hole_y^2)*(Ex*conj(Ex)+Ey*conj(Ey)+Ez*conj(Ez))^2,1:2,x_Ring,y_Ring); #linear numerator term of gamma for cladding
	numerator_gamma_4=integrate((n2_clad*idx_Hole_y^2)*abs(Ex^2+Ey^2+Ez^2)^2,1:2,x_Ring,y_Ring); #nonlinear numerator term of gamma for cladding 
	denominator_gamma=3*[integrate(Ex*conj(Hy)-Ey*conj(Hx),1:2,x_Ring,y_Ring)]^2; #denominator term of gamma 
	gamma=(2*pi*freq_p/c)*(eps0/mu0)*((numerator_gamma_1+numerator_gamma_2+numerator_gamma_3+numerator_gamma_4)/denominator_gamma);
switchtolayout;																																							


#Define Wavelength for Signal and Idler at the Resonance
Lambda_signal = abs(FSR_Pump) + Lambda_pump; #Panjang gelombang signal
freq_s = c/Lambda_signal; #Frekuensi signal 
freq_i = 2*freq_p - freq_s; #Frekuensi idler 
Lambda_idler =c/freq_i; #Panjang gelombang idler
                 

#Calculating Propagation Constant of Signal and Idler
lambda=zeros(2,1);
lambda(1,1)=Lambda_signal; #Signal 
lambda(2,1)=Lambda_idler; #Idler
neff_other =zeros(2,1) ;

for(jj=1:2){
setanalysis("wavelength",lambda(jj));
findmodes;

	ii=1; #Mode ke-1 ring (sudah ada bending)
	getdata("FDE::data::mode"+num2str(ii),"TE polarization fraction"); #mengambil data untuk mode-j
	dname="FDE::data::mode"+num2str(ii); #input ke deck card data mode-j
	copydcard(dname,"Ring_TE00"+"lambda"+num2str(jj)); #mengubah data mode-j menjadi data Ring mode-j		
		#Data index bias, dll mode ke-j
		neff_other(jj)=getdata("Ring_TE00"+"lambda"+num2str(jj),"neff"); #Effective Index
switchtolayout;
} 

#Propagation constant idler dan signal 
ks = 2*pi*neff_other(1)/lambda(1);
ki = 2*pi*neff_other(2)/lambda(2);

###Phase Missmatch
delta_k = 2*kp - ks - ki;
	

##Calculating Field Enhancement at Resonance with No Dispersion Assumed 
FE_p=abs(sigma/(1-tau*exp(-alfa_absil*L/2))); #FE Pump
FE_s=abs(sigma/(1-tau*exp(-alfa_absil*L/2))); #FE Signal 
FE_i=abs(sigma/(1-tau*exp(-alfa_absil*L/2))); #FE Idler

i=sqrt(-1);

###Calculating Conversion Efficiency
pump_power=[10]*1e-3; #pump power in mW
L_prime_numerator=L^2 * exp(-alfa_absil*L);
L_prime_complex =abs((1-exp(-alfa_absil*L+i*delta_k*L))/(alfa_absil*L-i*delta_k*L))^2;
L_prime=sqrt(L_prime_numerator*L_prime_complex);
eta = abs(gamma*pump_power*L_prime)^2 * FE_p^4 * FE_s^2 * FE_i^2; #conversion efficienvy in Watt
eta_dB =10*log10(1000*eta)-30 ; #Conversion efficiency in dB

print("Nonlinear Coefficient[w^-1 m^-1]:");
?abs(gamma) #showing absolute value of nonlinear coefficient

print("Conversion Efficiency [dB]:");
?eta_dB 
 
 
matlabsave("..."); #fill ... with file name
cd("...");	#fill ... with directory name 
